// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package myGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatsCrudClient is the client API for CatsCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatsCrudClient interface {
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllCats, error)
	Create(ctx context.Context, in *RequestCats, opts ...grpc.CallOption) (*Cats, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cats, error)
	Update(ctx context.Context, in *RequestCats, opts ...grpc.CallOption) (*Cats, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cats, error)
}

type catsCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewCatsCrudClient(cc grpc.ClientConnInterface) CatsCrudClient {
	return &catsCrudClient{cc}
}

func (c *catsCrudClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*AllCats, error) {
	out := new(AllCats)
	err := c.cc.Invoke(ctx, "/myGrpc.CatsCrud/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsCrudClient) Create(ctx context.Context, in *RequestCats, opts ...grpc.CallOption) (*Cats, error) {
	out := new(Cats)
	err := c.cc.Invoke(ctx, "/myGrpc.CatsCrud/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsCrudClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cats, error) {
	out := new(Cats)
	err := c.cc.Invoke(ctx, "/myGrpc.CatsCrud/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsCrudClient) Update(ctx context.Context, in *RequestCats, opts ...grpc.CallOption) (*Cats, error) {
	out := new(Cats)
	err := c.cc.Invoke(ctx, "/myGrpc.CatsCrud/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catsCrudClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cats, error) {
	out := new(Cats)
	err := c.cc.Invoke(ctx, "/myGrpc.CatsCrud/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatsCrudServer is the server API for CatsCrud service.
// All implementations must embed UnimplementedCatsCrudServer
// for forward compatibility
type CatsCrudServer interface {
	GetAll(context.Context, *Request) (*AllCats, error)
	Create(context.Context, *RequestCats) (*Cats, error)
	Get(context.Context, *Id) (*Cats, error)
	Update(context.Context, *RequestCats) (*Cats, error)
	Delete(context.Context, *Id) (*Cats, error)
	mustEmbedUnimplementedCatsCrudServer()
}

// UnimplementedCatsCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCatsCrudServer struct {
}

func (UnimplementedCatsCrudServer) GetAll(context.Context, *Request) (*AllCats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCatsCrudServer) Create(context.Context, *RequestCats) (*Cats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCatsCrudServer) Get(context.Context, *Id) (*Cats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCatsCrudServer) Update(context.Context, *RequestCats) (*Cats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCatsCrudServer) Delete(context.Context, *Id) (*Cats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCatsCrudServer) mustEmbedUnimplementedCatsCrudServer() {}

// UnsafeCatsCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatsCrudServer will
// result in compilation errors.
type UnsafeCatsCrudServer interface {
	mustEmbedUnimplementedCatsCrudServer()
}

func RegisterCatsCrudServer(s grpc.ServiceRegistrar, srv CatsCrudServer) {
	s.RegisterService(&CatsCrud_ServiceDesc, srv)
}

func _CatsCrud_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsCrudServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myGrpc.CatsCrud/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsCrudServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsCrud_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsCrudServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myGrpc.CatsCrud/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsCrudServer).Create(ctx, req.(*RequestCats))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsCrud_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsCrudServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myGrpc.CatsCrud/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsCrudServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsCrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsCrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myGrpc.CatsCrud/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsCrudServer).Update(ctx, req.(*RequestCats))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatsCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatsCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myGrpc.CatsCrud/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatsCrudServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// CatsCrud_ServiceDesc is the grpc.ServiceDesc for CatsCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatsCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myGrpc.CatsCrud",
	HandlerType: (*CatsCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _CatsCrud_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CatsCrud_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CatsCrud_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CatsCrud_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CatsCrud_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/catscrud.proto",
}
